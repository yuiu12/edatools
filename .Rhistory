load(url("happiness.rdata"))
library(usethis)
use_data(happiness)
#'   \item{\code{Income}}{double. Annual income in US dollars.}
#'   \item{\code{IQ}}{double. Adult intelligence quotient. This
#'   variable has a large amount of missing data.}
#'   \item{\code{Zip}}{character. USPS Zip code.}
#'   \item{\code{Children}}{integer. Number of children.}
#'   \item{\code{Happy}}{factor. Agreement with the statement
#'   "I am happy most of the time", coded as \code{Strongly Disagree} ,
#'   \code{Disagree}, \code{Neutral}, \code{Agree}, or
#'   \code{Strongly Agree}.}
#' }
"happiness"
use_data(happiness)
library(usethis)
use_data(happiness)
load(url("hapiness.R"))
load("D:/pythondaima/Rshujfenxi/edatools/edatools/data/happiness.rda")
library(usethis)
use_data(happiness)
library(usethis)
use_vignette("edatools","Introductions to edatools")
library(usethis)
use_package("ggplot2")
devtools::load_all(".")
library(usethis) use_vignette("edatools","Introductions to edatools")
library(usethis)
use_vignette("edatools","Introductions to edatools")
use_vignette("edatools","Introductions to edatools")
library(devtools)
build_vignettes()
build_vignettes()
varnames <- colnames(data)
#' @title Description of a data frame
#' @description
#' \code{contents} provides describes the contents of a data
#' frame.
#' @param data a data frame.
#' @importFrom utils object.size
#' @return a list with 4 components:
#' \describe{
#' \item{dfname}{name of data frame}
#' \item{nrow}{number of rows}
#' \item{ncol}{number of columns}
#' \item{size}{size of the data frame in bytes}
#' \item{varinfo}{data frame of overall dataset characteristics}
#' }
#'
#' @details
#' For each variable in a data frame, \code{contents} describes
#' the position, type, number of unique values, number of missing
#' values, and percent of missing values.
#'
#' @export
#'
#' @examples
#' df_info <- contents(happiness)
#' df_info
#' plot(df_info)
contents <- function(data) {
if(!(is.data.frame(data))){
stop("You need to input a data frame")
}
dataname <- deparse(substitute(data))
size <- object.size(data)
varnames <- colnames(data)
colnames <- c("pos","variable","type","n_unique","n_miss","pct_miss")
pos =seq_along(data)
varname <- colnames(data)
type = sapply(data,function(x)class(x)[1])
n_unique = sapply(data,function(x)length(unique(x)))
n_miss = sapply(data,function(x)sum(is.na(x)))
pct_miss = n_miss/nrow(data)
varinfo <- data.frame(
pos,varname,type,n_unique,n_miss,pct_miss
)
results <- list(dfname=dataname,size=size,nrow=nrow(data),ncol=ncol(data),varinfo=varinfo)
class(results) <- c("contents","list")
return(results)
}
#' Functions for exploring the contents of a data frame.
#'
#' edatools provides tools for exploring the variables in
#' a data frame.
#'
#' @docType package
#' @name edatools-package
#' @aliases edatools
NULL
#' @title
#' Happiness Dataset
#'
#' @description
#' A data frame containing a happiness survey and demographic data.
#' This data are fictitious.
#'
#' @source
#' The data were randomly generated using functions from the
#' \href{https://cran.r-project.org/web/packages/wakefield/index.html}{wakefield}
#' package.
#'
#' @format A data frame with 460 rows and 11 variables:
#' \describe{
#'   \item{\code{ID}}{character. A unique identifier.}
#'   \item{\code{Date}}{date. Date of the interview.}
#'   \item{\code{Sex}}{factor. Sex coded as \code{Male} or \code{Female}.}
#'   \item{\code{Race}}{factor. Race coded as an 8-level factor.}
#'   \item{\code{Age}}{integer. Age in years.}
#'   \item{\code{Education}}{factor. Education coded as a 13-level factor.}
#'   \item{\code{Income}}{double. Annual income in US dollars.}
#'   \item{\code{IQ}}{double. Adult intelligence quotient. This
#'   variable has a large amount of missing data.}
#'   \item{\code{Zip}}{character. USPS Zip code.}
#'   \item{\code{Children}}{integer. Number of children.}
#'   \item{\code{Happy}}{factor. Agreement with the statement
#'   "I am happy most of the time", coded as \code{Strongly Disagree} ,
#'   \code{Disagree}, \code{Neutral}, \code{Agree}, or
#'   \code{Strongly Agree}.}
#' }
"happiness"
#' @title Visualize a data frame
#'
#' @description
#' \code{plot.contents} visualizes the variables in a data frame.
#'
#' @details
#' For each variable, the plot displays
#' \itemize{
#'   \item{type (\code{numeric},
#'               \code{integer},
#'               \code{factor},
#'               \code{ordered factor},
#'               \code{logical}, or \code{date})}
#'   \item{percent of available (and missing) cases}
#' }
#' Variables are sorted by type and the total number of variables
#' and cases are printed in the caption.
#' @param x an object of class \code{contents}.
#' @param ... additional arguments (not currently used).
#' @import ggplot2
#' @method plot contents
#' @export
#' @return a \code{ggplot2} graph
#' @seealso See \link{contents}.
#' @examples
#' df_info <- contents(happiness)
#' plot(df_info)
plot_contents <- function(x,...){
if(!inherits(x,"contents"))
stop("Object must be of class 'contents'")
classes <- x$varinfo$type
pct_n <- 100 * (1-x$varinfo$pct_miss)
df <- data.frame(var=x$varinfo$varname,classes=classes,pct_n=pct_n,classes_n=as.numeric(as.factor(classes)))
ggplot(df,aes(x,reorder(var,classes_n),y=pct_n,fill=classes)) +
geom_bar(stat="identity") +
labs(x="",y="Percent Available",title=x$dfname,caption=paste(x$nrow,"cases",x$ncol,"variables"),fill="Type") +
guides(fill=guide_legend(reverse=TRUE)) +
scale_y_continuous(breaks=seq(0,100,20)) +
coord_flip() +
theme_minimal()
}
#' @title Description of a data frame
#' @description
#' \code{print.contents} prints a concise description of a data frame.
#' @param x an object of class \code{contents}.
#' @param digits number of significant digits to use for percentages.
#' @param ... additional arguments passed to the print function.
#' @return NULL
#' @method print contents
#' @export
#' @examples
#' df_info <- contents(happiness)
#' print(df_info, digits=4)
#' print
print.contents <- function(x,digits=2,...){
if(!inherits(x,"contents"))
stop("Object must be of class 'contents'")
cat("Data frame:",x$dfname,"\n")
cat(x$nrow,"observations and",x$ncol,"variables\n")
x$varinfo$varname <- ifelse(x$varinfo$n_unique == x$nrow,paste0(x$varinfo$varname,"*"),x$varinfo$varname)
cat("size:",format(x$size,units="Mb"),"\n")
print(x$varinfo,digits=digits,row.names=FALSE,...)
}
library(usethis)
use_vignette("edatools","Introductions to edatools")
vignette("edatools")
